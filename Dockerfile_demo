# ────────────────────────────────────────────────────────────
#  🐳 Chorely backend – demo‑day Dockerfile
#     • builds TypeScript once, runs compiled JS (fast startup)
#     • runtime image only prod deps + compiled artefacts
#     • waits for Postgres → migrate → seed (if empty) → start
# ────────────────────────────────────────────────────────────

######################## 1️⃣  builder stage ########################
FROM node:18-alpine AS builder
WORKDIR /app

# install all deps for build (dev+prod)
COPY package*.json ./
RUN npm ci --ignore-scripts --prefer-offline

# copy source & build
COPY . ./
RUN npm run build     # emits dist/

######################## 2️⃣  runtime stage ########################
FROM node:18-alpine
WORKDIR /app

# prod deps only ➜ smaller image
COPY --from=builder /app/package*.json ./
RUN npm ci --omit=dev --prefer-offline --ignore-scripts

# compiled application
COPY --from=builder /app/dist ./dist

# knex runtime artefacts (JS only)
COPY --from=builder /app/dist/src/db/config/knexfile.js ./src/db/config/knexfile.js
COPY --from=builder /app/dist/src/db/config/migrations        ./src/db/migrations
COPY --from=builder /app/src/db/config/seeds             ./src/db/seeds

# start script
COPY --from=builder /app/start_demo.sh ./start_demo.sh
RUN chmod +x start_demo.sh

# pg_isready for wait loop
RUN apk add --no-cache postgresql-client

EXPOSE 4000
ENV NODE_ENV=production

CMD ["./start_demo.sh"]
