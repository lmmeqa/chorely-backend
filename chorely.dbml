Project chorely {
  database_type: "PostgreSQL"
}

/* ===== Enums ===== */
Enum chore_status {
  unapproved
  unclaimed
  claimed
  complete
}

Enum dispute_status {
  pending
  approved
  rejected
}

Enum vote_type {
  approve
  reject
}

/* ===== Tables ===== */

Table home {
  id uuid [pk, default: `uuid_generate_v4()`]
  name varchar [not null]
  weekly_point_quota int [not null, default: 100] // CHECK >= 0 below
  created_at timestamptz [not null, default: `now()`]
  updated_at timestamptz [not null, default: `now()`]

  Note: 'weekly_point_quota >= 0'
}

Table users {
  email varchar [pk]
  name varchar [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]
}

Table user_homes {
  user_email varchar [not null]
  home_id uuid [not null]
  points int [not null, default: 0]

  Note: 'points >= 0'

  Indexes {
    (user_email, home_id) [pk]
  }
}

Table chores {
  uuid uuid [pk]
  name varchar [not null]
  description text [not null]
  time timestamp [not null]
  icon varchar [not null]
  user_email varchar [null]               // ON DELETE SET NULL via Ref below
  status chore_status [not null, default: 'unapproved']
  home_id uuid [not null]
  points int [not null, default: 10]
  completed_at timestamp [null]
  claimed_at timestamp [null]
  created_at timestamp [not null]
  updated_at timestamp [not null]

  Note: 'points >= 0'

  Indexes {
    (home_id)
    (status)
    (user_email)
  }
}

Table todo_items {
  id uuid [pk, default: `uuid_generate_v4()`]
  chore_id uuid [not null]
  name varchar [not null]
  description text [not null]
  "order" int [not null, default: 0]

  Indexes {
    (chore_id, "order") [unique]
  }
}

Table chore_approvals {
  chore_uuid uuid [not null]
  user_email varchar [not null]

  Indexes {
    (chore_uuid, user_email) [pk]
    user_email
  }
}

/* Disputes (aligns with mock.ts: uuid, status values, optional image) */
Table disputes {
  uuid uuid [pk]
  chore_id uuid [not null]
  disputer_email varchar [not null]
  reason text [not null]
  image_url varchar                         // optional
  status dispute_status [not null, default: 'pending']
  created_at timestamp [not null]
  updated_at timestamp [not null]

  Indexes {
    (status)
    (chore_id)
    (disputer_email)
  }
}

Table dispute_votes {
  dispute_uuid uuid [not null]
  user_email varchar [not null]
  vote vote_type [not null]
  created_at timestamp [not null]

  Indexes {
    (dispute_uuid, user_email) [pk]
    dispute_uuid
    user_email
  }
}

/* ===== Relationships with explicit ON DELETE actions ===== */

/* user_homes: cascade on user/home delete */
Ref: user_homes.user_email > users.email [delete: cascade]
Ref: user_homes.home_id > home.id [delete: cascade]

/* chores */
Ref: chores.home_id > home.id [delete: cascade]
Ref: chores.user_email > users.email [delete: set null]

/* todo_items */
Ref: todo_items.chore_id > chores.uuid [delete: cascade]

/* chore_approvals */
Ref: chore_approvals.chore_uuid > chores.uuid [delete: cascade]
Ref: chore_approvals.user_email > users.email [delete: cascade]

/* disputes */
Ref: disputes.chore_id > chores.uuid [delete: cascade]
Ref: disputes.disputer_email > users.email [delete: cascade]

/* dispute_votes */
Ref: dispute_votes.dispute_uuid > disputes.uuid [delete: cascade]
Ref: dispute_votes.user_email > users.email [delete: cascade]
